Directory structure:
└── ./Jobmanager/
    ├── app/
    │   ├── routes.py
    │   ├── __init__.py
    │   ├── templates/
    │   │   ├── customer_form.html
    │   │   ├── job_form.html
    │   │   ├── customer_list.html
    │   │   ├── base.html
    │   │   └── job_list.html
    │   ├── init_db.py
    │   ├── schema.sql
    │   └── __pycache__/
    ├── instance/
    ├── gitback.sh
    ├── run.py
    ├── LICENSE
    ├── updated-jobmanager-doc.md
    ├── README.md
    └── requirements.txt

================================================
File: /app/routes.py
================================================
# app/routes.py
from flask import Blueprint, render_template, current_app, g, request, redirect, url_for, flash
from datetime import datetime, timezone
import json
import sqlite3

bp = Blueprint('main', __name__)

def get_db():
    if 'db' not in g:
        g.db = sqlite3.connect(
            current_app.config['DATABASE'],
            detect_types=sqlite3.PARSE_DECLTYPES
        )
        g.db.row_factory = sqlite3.Row
    return g.db

@bp.teardown_app_request
def close_db(e=None):
    db = g.pop('db', None)
    if db is not None:
        db.close()

# app/routes.py
@bp.route('/')
def index():
    db = get_db()
    customers = db.execute(
        'SELECT * FROM customer ORDER BY name'
    ).fetchall()
    return render_template('customer_list.html', customers=customers)

@bp.route('/customer/add', methods=['GET', 'POST'])
def add_customer():
    if request.method == 'POST':
        db = get_db()
        db.execute(
            'INSERT INTO customer (name, email, phone, street, city, postal_code, country, vat_number, payment_terms, notes)'
            ' VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',
            (request.form['name'], request.form['email'], request.form['phone'],
             request.form['street'], request.form['city'], request.form['postal_code'],
             request.form['country'], request.form['vat_number'], request.form['payment_terms'],
             request.form['notes'])
        )
        db.commit()
        return redirect(url_for('main.index'))
    return render_template('customer_form.html')

@bp.route('/customer/<int:id>/edit', methods=['GET', 'POST'])
def edit_customer(id):
    db = get_db()
    customer = db.execute('SELECT * FROM customer WHERE id = ?', (id,)).fetchone()
    
    if request.method == 'POST':
        db.execute(
            'UPDATE customer SET name=?, email=?, phone=?, street=?, city=?, postal_code=?, '
            'country=?, vat_number=?, payment_terms=?, notes=? WHERE id=?',
            (request.form['name'], request.form['email'], request.form['phone'],
             request.form['street'], request.form['city'], request.form['postal_code'],
             request.form['country'], request.form['vat_number'], request.form['payment_terms'],
             request.form['notes'], id)
        )
        db.commit()
        return redirect(url_for('main.index'))
    
    return render_template('customer_form.html', customer=customer)

@bp.route('/customer/<int:id>/delete', methods=['POST'])
def delete_customer(id):
    db = get_db()
    db.execute('DELETE FROM customer WHERE id = ?', (id,))
    db.commit()
    return redirect(url_for('main.index'))

@bp.route('/jobs')
def job_list():
    db = get_db()
    jobs = db.execute('''
        SELECT 
            job.*,
            customer.name as customer_name,
            te_active.id as active_timer_id,
            te_active.start_time as timer_start,
            COALESCE(SUM(
                CASE 
                    WHEN te_all.end_time IS NOT NULL 
                    THEN (julianday(te_all.end_time) - julianday(te_all.start_time)) * 24 
                    ELSE 0 
                END
            ), 0) as accumulated_hours
        FROM job 
        JOIN customer ON job.customer_id = customer.id 
        LEFT JOIN time_entry te_active ON job.id = te_active.job_id 
            AND te_active.end_time IS NULL
        LEFT JOIN time_entry te_all ON job.id = te_all.job_id 
            AND te_all.end_time IS NOT NULL
        GROUP BY job.id
        ORDER BY 
            CASE job.status
                WHEN 'Active' THEN 1
                WHEN 'Pending' THEN 2
                WHEN 'Completed' THEN 3
            END,
            job.last_active DESC NULLS LAST,
            job.creation_date DESC
    ''').fetchall()
    return render_template('job_list.html', jobs=jobs)


@bp.route('/customer/<int:customer_id>/add_job', methods=['GET', 'POST'])
def add_job(customer_id):
    db = get_db()
    customer = db.execute('SELECT * FROM customer WHERE id = ?', (customer_id,)).fetchone()
    
    if request.method == 'POST':
        db.execute(
            'INSERT INTO job (customer_id, description, status, creation_date, base_rate, estimated_hours)'
            ' VALUES (?, ?, ?, ?, ?, ?)',
            (customer_id, request.form['description'], request.form['status'],
             datetime.now().isoformat(), 
             float(request.form['base_rate']) if request.form['base_rate'] else None,
             float(request.form['estimated_hours']) if request.form['estimated_hours'] else None)
        )
        db.commit()
        return redirect(url_for('main.job_list'))
    
    return render_template('job_form.html', customer=customer)

@bp.route('/job/<int:id>/edit', methods=['GET', 'POST'])
def edit_job(id):
    db = get_db()
    job = db.execute('''
        SELECT job.*, customer.name as customer_name 
        FROM job 
        JOIN customer ON job.customer_id = customer.id 
        WHERE job.id = ?
    ''', (id,)).fetchone()
    
    if request.method == 'POST':
        db.execute(
            'UPDATE job SET description=?, status=?, base_rate=?, estimated_hours=? WHERE id=?',
            (request.form['description'], request.form['status'],
             float(request.form['base_rate']) if request.form['base_rate'] else None,
             float(request.form['estimated_hours']) if request.form['estimated_hours'] else None,
             id)
        )
        db.commit()
        return redirect(url_for('main.job_list'))
    
    return render_template('job_form.html', job=job)

@bp.route('/job/<int:id>/delete', methods=['POST'])
def delete_job(id):
    db = get_db()
    db.execute('DELETE FROM job WHERE id = ?', (id,))
    db.commit()
    return redirect(url_for('main.job_list'))

@bp.route('/job/<int:id>/start_timer', methods=['POST'])
def start_timer(id):
    db = get_db()
    now = datetime.now(timezone.utc).isoformat()
    
    # Check if there's any active timer
    active_entry = db.execute('''
        SELECT time_entry.* 
        FROM time_entry 
        WHERE end_time IS NULL
    ''').fetchone()
    
    if active_entry:
        # Stop the current timer
        db.execute(
            'UPDATE time_entry SET end_time = ? WHERE id = ?',
            (now, active_entry['id'])
        )
    
    # Create new time entry
    db.execute(
        'INSERT INTO time_entry (job_id, start_time, entry_type) VALUES (?, ?, ?)',
        (id, now, 'auto')
    )
    
    # Update job status and last_active
    db.execute('UPDATE job SET status = ?, last_active = ? WHERE id = ?', 
               ('Active', now, id))
    
    db.commit()
    return json.dumps({'success': True}), 200, {'ContentType': 'application/json'}

@bp.route('/job/<int:id>/stop_timer', methods=['POST'])
def stop_timer(id):
    db = get_db()
    now = datetime.now(timezone.utc).isoformat()
    
    # Find and stop active timer for this job
    db.execute('''
        UPDATE time_entry 
        SET end_time = ? 
        WHERE job_id = ? AND end_time IS NULL
    ''', (now, id))
    
    db.commit()
    return json.dumps({'success': True}), 200, {'ContentType': 'application/json'}

@bp.route('/job/<int:id>/pause_timer', methods=['POST'])
def pause_timer(id):
    db = get_db()
    now = datetime.now(timezone.utc).isoformat()
    
    # Just stop the current timer but don't change job status
    db.execute('''
        UPDATE time_entry 
        SET end_time = ? 
        WHERE job_id = ? AND end_time IS NULL
    ''', (now, id))
    
    db.commit()
    return json.dumps({'success': True}), 200, {'ContentType': 'application/json'}

@bp.route('/job/<int:id>/resume_timer', methods=['POST'])
def resume_timer(id):
    db = get_db()
    now = datetime.now(timezone.utc).isoformat()
    
    # Create new time entry but don't change job status
    db.execute(
        'INSERT INTO time_entry (job_id, start_time, entry_type) VALUES (?, ?, ?)',
        (id, now, 'auto')
    )
    db.commit()
    
    return json.dumps({'success': True}), 200, {'ContentType': 'application/json'}



================================================
File: /app/__init__.py
================================================
# app/__init__.py
from flask import Flask
import sqlite3
import os

def create_app():
    app = Flask(__name__)
    app.config['DATABASE'] = os.path.join(app.instance_path, 'jobmanager.db')
    
    # Ensure instance folder exists
    try:
        os.makedirs(app.instance_path)
    except OSError:
        pass
        
    from . import routes
    app.register_blueprint(routes.bp)
    
    return app

# Add to app/__init__.py after creating app
def init_db():
    with app.app_context():
        db = get_db()
        with app.open_resource('schema.sql', mode='r') as f:
            db.executescript(f.read().decode('utf8'))

================================================
File: /app/templates/customer_form.html
================================================
<!-- app/templates/customer_form.html -->
{% extends "base.html" %}

{% block content %}
<div>
    <h2>{% if customer %}Edit{% else %}Add{% endif %} Customer</h2>
    <form method="post" style="max-width: 600px;">
        <div style="margin-bottom: 15px;">
            <label style="display: block; margin-bottom: 5px;">Name *</label>
            <input type="text" name="name" required style="width: 100%; padding: 8px;" 
                   value="{{ customer.name if customer else '' }}">
        </div>
        
        <div style="margin-bottom: 15px;">
            <label style="display: block; margin-bottom: 5px;">Email</label>
            <input type="email" name="email" style="width: 100%; padding: 8px;"
                   value="{{ customer.email if customer else '' }}">
        </div>
        
        <div style="margin-bottom: 15px;">
            <label style="display: block; margin-bottom: 5px;">Phone</label>
            <input type="tel" name="phone" style="width: 100%; padding: 8px;"
                   value="{{ customer.phone if customer else '' }}">
        </div>
        
        <div style="margin-bottom: 15px;">
            <label style="display: block; margin-bottom: 5px;">Street</label>
            <input type="text" name="street" style="width: 100%; padding: 8px;"
                   value="{{ customer.street if customer else '' }}">
        </div>
        
        <div style="margin-bottom: 15px;">
            <label style="display: block; margin-bottom: 5px;">City</label>
            <input type="text" name="city" style="width: 100%; padding: 8px;"
                   value="{{ customer.city if customer else '' }}">
        </div>
        
        <div style="margin-bottom: 15px;">
            <label style="display: block; margin-bottom: 5px;">Postal Code</label>
            <input type="text" name="postal_code" style="width: 100%; padding: 8px;"
                   value="{{ customer.postal_code if customer else '' }}">
        </div>
        
        <div style="margin-bottom: 15px;">
            <label style="display: block; margin-bottom: 5px;">Country</label>
            <input type="text" name="country" style="width: 100%; padding: 8px;"
                   value="{{ customer.country if customer else '' }}">
        </div>
        
        <div style="margin-bottom: 15px;">
            <label style="display: block; margin-bottom: 5px;">VAT Number</label>
            <input type="text" name="vat_number" style="width: 100%; padding: 8px;"
                   value="{{ customer.vat_number if customer else '' }}">
        </div>
        
        <div style="margin-bottom: 15px;">
            <label style="display: block; margin-bottom: 5px;">Payment Terms</label>
            <input type="text" name="payment_terms" style="width: 100%; padding: 8px;"
                   value="{{ customer.payment_terms if customer else '' }}">
        </div>
        
        <div style="margin-bottom: 15px;">
            <label style="display: block; margin-bottom: 5px;">Notes</label>
            <textarea name="notes" style="width: 100%; padding: 8px; height: 100px;">{{ customer.notes if customer else '' }}</textarea>
        </div>
        
        <button type="submit" style="background: #4CAF50; color: white; padding: 10px 20px; border: none; cursor: pointer;">
            {% if customer %}Save Changes{% else %}Save Customer{% endif %}
        </button>
        <a href="{{ url_for('main.index') }}" style="display: inline-block; padding: 10px 20px; background: #f5f5f5; text-decoration: none; color: black; margin-left: 10px;">Cancel</a>
    </form>
</div>
{% endblock %}

================================================
File: /app/templates/job_form.html
================================================
<!-- app/templates/job_form.html -->
{% extends "base.html" %}

{% block content %}
<div>
    <h2>{% if job %}Edit Job{% else %}Add Job for {{ customer.name }}{% endif %}</h2>
    <form method="post" style="max-width: 600px;">
        <div style="margin-bottom: 15px;">
            <label style="display: block; margin-bottom: 5px;">Description *</label>
            <textarea name="description" required style="width: 100%; padding: 8px; height: 100px;">{{ job.description if job else '' }}</textarea>
        </div>
        
        <div style="margin-bottom: 15px;">
            <label style="display: block; margin-bottom: 5px;">Status *</label>
            <select name="status" required style="width: 100%; padding: 8px;">
                <option value="Active" {% if job and job.status == 'Active' %}selected{% endif %}>Active</option>
                <option value="Pending" {% if job and job.status == 'Pending' %}selected{% endif %}>Pending</option>
                <option value="Completed" {% if job and job.status == 'Completed' %}selected{% endif %}>Completed</option>
            </select>
        </div>
        
        <div style="margin-bottom: 15px;">
            <label style="display: block; margin-bottom: 5px;">Base Rate (€/hour)</label>
            <input type="number" step="0.01" name="base_rate" style="width: 100%; padding: 8px;"
                   value="{{ "%.2f"|format(job.base_rate) if job and job.base_rate else '' }}">
        </div>
        
        <div style="margin-bottom: 15px;">
            <label style="display: block; margin-bottom: 5px;">Estimated Hours</label>
            <input type="number" step="0.5" name="estimated_hours" style="width: 100%; padding: 8px;"
                   value="{{ "%.1f"|format(job.estimated_hours) if job and job.estimated_hours else '' }}">
        </div>
        
        <button type="submit" style="background: #4CAF50; color: white; padding: 10px 20px; border: none; cursor: pointer;">
            {% if job %}Save Changes{% else %}Create Job{% endif %}
        </button>
        <a href="{{ url_for('main.job_list') }}" style="display: inline-block; padding: 10px 20px; background: #f5f5f5; text-decoration: none; color: black; margin-left: 10px;">Cancel</a>
    </form>
</div>
{% endblock %}

================================================
File: /app/templates/customer_list.html
================================================
<!-- app/templates/customer_list.html -->
{% extends "base.html" %}

{% block content %}
<div>
    <h2>Customers</h2>
    <a href="{{ url_for('main.add_customer') }}" style="display: inline-block; padding: 10px; background: #4CAF50; color: white; text-decoration: none; margin-bottom: 20px;">Add Customer</a>
    
    <table style="width: 100%; border-collapse: collapse;">
        <thead>
            <tr style="background: #f5f5f5;">
                <th style="text-align: left; padding: 10px; border: 1px solid #ddd;">Name</th>
                <th style="text-align: left; padding: 10px; border: 1px solid #ddd;">Contact</th>
                <th style="text-align: left; padding: 10px; border: 1px solid #ddd;">Location</th>
                <th style="text-align: left; padding: 10px; border: 1px solid #ddd;">Actions</th>
            </tr>
        </thead>
        <tbody>
            {% for customer in customers %}
            <tr>
                <td style="padding: 10px; border: 1px solid #ddd;">{{ customer.name }}</td>
                <td style="padding: 10px; border: 1px solid #ddd;">
                    {% if customer.email %}Email: {{ customer.email }}<br>{% endif %}
                    {% if customer.phone %}Phone: {{ customer.phone }}{% endif %}
                </td>
                <td style="padding: 10px; border: 1px solid #ddd;">
                    {% if customer.city %}{{ customer.city }}{% endif %}
                    {% if customer.country %}, {{ customer.country }}{% endif %}
                </td>
                <td style="padding: 10px; border: 1px solid #ddd;">
                    <a href="{{ url_for('main.edit_customer', id=customer.id) }}" 
                       style="display: inline-block; padding: 5px 10px; background: #2196F3; color: white; text-decoration: none; margin-right: 5px;">
                        Edit
                    </a>
                    <a href="{{ url_for('main.add_job', customer_id=customer.id) }}"
                        style="display: inline-block; padding: 5px 10px; background: #4CAF50; color: white; text-decoration: none; margin-right: 5px;">
                        Create Job
                    </a>
                    <form action="{{ url_for('main.delete_customer', id=customer.id) }}" method="post" style="display: inline;">
                        <button type="submit" onclick="return confirm('Are you sure you want to delete this customer?');"
                                style="padding: 5px 10px; background: #f44336; color: white; border: none; cursor: pointer;">
                            Delete
                        </button>
                    </form>
                </td>
            </tr>
            {% endfor %}
        </tbody>
    </table>
</div>
{% endblock %}

================================================
File: /app/templates/base.html
================================================
<!-- app/templates/base.html -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Job Manager</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            max-width: 1200px;
            margin: 0 auto;
        }
        .nav-menu {
            margin-bottom: 30px;
            border-bottom: 2px solid #eee;
            padding-bottom: 10px;
        }
        .nav-menu a {
            display: inline-block;
            padding: 8px 16px;
            margin-right: 10px;
            background: #2196F3;
            color: white;
            text-decoration: none;
            border-radius: 4px;
        }
        .nav-menu a.active {
            background: #1976D2;
        }
        .global-timer {
            float: right;
            padding: 8px 16px;
        }
        .active-job {
            font-weight: bold;
            margin-right: 10px;
        }
        .timer.paused {
            color: #666;
        }
        .timer-container button {
            padding: 5px 10px;
            margin: 0 2px;
            border: none;
            cursor: pointer;
        }
        .start-btn, .resume-btn { background: #4CAF50; color: white; }
        .stop-btn { background: #f44336; color: white; }
        .pause-btn { background: #FFC107; color: white; }
    </style>
</head>
<body>
    <h1>Job Manager</h1>
    <div class="nav-menu">
        <a href="{{ url_for('main.index') }}" {% if request.endpoint == 'main.index' %}class="active"{% endif %}>Customers</a>
        <a href="{{ url_for('main.job_list') }}" {% if request.endpoint == 'main.job_list' %}class="active"{% endif %}>Jobs</a>
        
        <div class="global-timer">
            <span id="active-job-info" class="active-job"></span>
        </div>
    </div>
    {% block content %}{% endblock %}

    <script>
        // Global state for active job display
        let activeJobId = null;
        let activeJobName = null;

        // Update active job display
        function updateGlobalControls(jobId, jobName) {
            activeJobId = jobId;
            activeJobName = jobName;
            
            const jobInfo = document.getElementById('active-job-info');
            if (activeJobId) {
                jobInfo.textContent = `Active: ${activeJobName}`;
            } else {
                jobInfo.textContent = '';
            }
        }
    </script>
</body>
</html>

================================================
File: /app/templates/job_list.html
================================================
<!-- app/templates/job_list.html -->
{% extends "base.html" %}

{% block content %}
<div>
    <h2>Jobs</h2>
    <a href="{{ url_for('main.index') }}" style="display: inline-block; padding: 10px; background: #2196F3; color: white; text-decoration: none; margin-bottom: 20px;">Back to Customers</a>
    
    <table style="width: 100%; border-collapse: collapse;">
        <thead>
            <tr style="background: #f5f5f5;">
                <th style="text-align: left; padding: 10px; border: 1px solid #ddd;">Customer</th>
                <th style="text-align: left; padding: 10px; border: 1px solid #ddd;">Description</th>
                <th style="text-align: left; padding: 10px; border: 1px solid #ddd;">Status</th>
                <th style="text-align: left; padding: 10px; border: 1px solid #ddd;">Timer</th>
                <th style="text-align: left; padding: 10px; border: 1px solid #ddd;">Rate</th>
                <th style="text-align: left; padding: 10px; border: 1px solid #ddd;">Hours</th>
                <th style="text-align: left; padding: 10px; border: 1px solid #ddd;">Actions</th>
            </tr>
        </thead>
        <tbody>
            {% for job in jobs %}
            <tr id="job-{{ job.id }}" {% if job.active_timer_id %}class="active-timer"{% endif %}>
                <td style="padding: 10px; border: 1px solid #ddd;">{{ job.customer_name }}</td>
                <td style="padding: 10px; border: 1px solid #ddd;">{{ job.description }}</td>
                <td style="padding: 10px; border: 1px solid #ddd;">
                    <span style="
                        padding: 3px 8px;
                        border-radius: 3px;
                        {% if job.status == 'Active' %}
                            background-color: #4CAF50;
                        {% elif job.status == 'Pending' %}
                            background-color: #FFC107;
                        {% else %}
                            background-color: #9E9E9E;
                        {% endif %}
                        color: white;
                    ">{{ job.status }}</span>
                </td>
                <td style="padding: 10px; border: 1px solid #ddd;">
                    {% if job.status == 'Active' %}
                        <div class="timer-container">
                            <span class="timer" id="timer-{{ job.id }}"
                                  data-start="{{ job.timer_start }}"
                                  data-accumulated="{{ job.accumulated_hours }}"
                                  data-paused="false">
                                00:00:00
                            </span>
                            {% if job.active_timer_id %}
                                <button onclick="stopTimer({{ job.id }})" class="stop-btn">Stop</button>
                                <button onclick="pauseTimer({{ job.id }})" class="pause-btn">Pause</button>
                                <button onclick="resumeTimer({{ job.id }})" class="resume-btn" style="display: none;">Resume</button>
                            {% else %}
                                <button onclick="startTimer({{ job.id }})" class="start-btn">Start</button>
                            {% endif %}
                        </div>
                    {% endif %}
                </td>
                <td style="padding: 10px; border: 1px solid #ddd;">{{ "€%.2f"|format(job.base_rate) if job.base_rate else '-' }}</td>
                <td style="padding: 10px; border: 1px solid #ddd;">
                    {% if job.total_hours %}
                        {{ "%.1f"|format(job.total_hours) }} / {{ "%.1f"|format(job.estimated_hours) if job.estimated_hours else '-' }}
                    {% else %}
                        0 / {{ "%.1f"|format(job.estimated_hours) if job.estimated_hours else '-' }}
                    {% endif %}
                </td>
                <td style="padding: 10px; border: 1px solid #ddd;">
                    <a href="{{ url_for('main.edit_job', id=job.id) }}" 
                       style="display: inline-block; padding: 5px 10px; background: #2196F3; color: white; text-decoration: none; margin-right: 5px;">
                        Edit
                    </a>
                    <form action="{{ url_for('main.delete_job', id=job.id) }}" method="post" style="display: inline;">
                        <button type="submit" onclick="return confirm('Are you sure you want to delete this job?');"
                                style="padding: 5px 10px; background: #f44336; color: white; border: none; cursor: pointer;">
                            Delete
                        </button>
                    </form>
                </td>
            </tr>
            {% endfor %}
        </tbody>
    </table>

    <script>
        let timerIntervals = {};

        function updateTimer(timerElement) {
            const startTime = timerElement.dataset.start;
            const accumulated = parseFloat(timerElement.dataset.accumulated) || 0;
            
            // For running or paused jobs, we should have a start time
            if (!startTime) return;
            
            const start = new Date(startTime);
            const isPaused = timerElement.dataset.paused === 'true';
            
            if (isPaused) {
                // Keep showing the accumulated time when paused
                const hours = Math.floor(accumulated);
                const minutes = Math.floor((accumulated * 60) % 60);
                const seconds = Math.floor((accumulated * 3600) % 60);
                timerElement.textContent = 
                    `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
                clearInterval(timerIntervals[timerElement.id]);
                return;
            }
            
            function update() {
                const now = new Date();
                const elapsedHours = (now - start) / (1000 * 60 * 60) + accumulated;
                const hours = Math.floor(elapsedHours);
                const minutes = Math.floor((elapsedHours * 60) % 60);
                const seconds = Math.floor((elapsedHours * 3600) % 60);
                
                timerElement.textContent = 
                    `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
            }
            
            update();
            clearInterval(timerIntervals[timerElement.id]);
            timerIntervals[timerElement.id] = setInterval(update, 1000);
        }

        function startTimer(jobId) {
            fetch(`/job/${jobId}/start_timer`, {
                method: 'POST',
            }).then(response => {
                if (response.ok) {
                    const jobRow = document.getElementById(`job-${jobId}`);
                    const jobName = jobRow.querySelector('td').textContent;
                    updateGlobalControls(jobId, jobName);
                    window.location.reload();
                }
            });
        }

        function stopTimer(jobId) {
            fetch(`/job/${jobId}/stop_timer`, {
                method: 'POST',
            }).then(response => {
                if (response.ok) {
                    updateGlobalControls(null, null);
                    window.location.reload();
                }
            });
        }

        function pauseTimer(jobId) {
            fetch(`/job/${jobId}/pause_timer`, {
                method: 'POST',
            }).then(response => {
                if (response.ok) {
                    const timer = document.getElementById(`timer-${jobId}`);
                    timer.dataset.paused = 'true';
                    timer.classList.add('paused');
                    
                    clearInterval(timerIntervals[`timer-${jobId}`]); // Clear the interval
                    
                    const container = timer.closest('.timer-container');
                    container.querySelector('.pause-btn').style.display = 'none';
                    container.querySelector('.resume-btn').style.display = 'inline';
                }
            });
        }

        function resumeTimer(jobId) {
            fetch(`/job/${jobId}/resume_timer`, {
                method: 'POST',
            }).then(response => {
                if (response.ok) {
                    const timer = document.getElementById(`timer-${jobId}`);
                    timer.dataset.paused = 'false';
                    timer.classList.remove('paused');
                    updateTimer(timer);
                    
                    const container = timer.closest('.timer-container');
                    container.querySelector('.pause-btn').style.display = 'inline';
                    container.querySelector('.resume-btn').style.display = 'none';
                }
            });
        }

        document.addEventListener('DOMContentLoaded', () => {
            document.querySelectorAll('.timer').forEach(timer => {
                updateTimer(timer);
            });

            const activeTimerRow = document.querySelector('.active-timer');
            if (activeTimerRow) {
                const jobId = activeTimerRow.id.replace('job-', '');
                const jobName = activeTimerRow.querySelector('td').textContent;
                updateGlobalControls(jobId, jobName);
            }
        });
    </script>
</div>
{% endblock %}

================================================
File: /app/init_db.py
================================================
# app/init_db.py
from app import create_app

app = create_app()

def init_db():
    with app.app_context():
        from app.routes import get_db
        db = get_db()
        with app.open_resource('schema.sql', mode='r') as f:
            db.executescript(f.read())  # Remove the decode() since it's already a string
        print("Database initialized successfully!")

if __name__ == '__main__':
    init_db()

================================================
File: /app/schema.sql
================================================
-- app/schema.sql
CREATE TABLE IF NOT EXISTS customer (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    email TEXT,
    phone TEXT,
    street TEXT,
    city TEXT,
    postal_code TEXT,
    country TEXT,
    vat_number TEXT,
    payment_terms TEXT,
    notes TEXT
);

CREATE TABLE IF NOT EXISTS job (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    customer_id INTEGER NOT NULL,
    description TEXT NOT NULL,
    status TEXT NOT NULL,
    creation_date TEXT NOT NULL,
    deadline TEXT,
    base_rate REAL,
    custom_rate REAL,
    estimated_hours REAL,
    total_hours REAL DEFAULT 0,
    last_active TEXT,
    FOREIGN KEY (customer_id) REFERENCES customer (id)
);

CREATE TABLE IF NOT EXISTS time_entry (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    job_id INTEGER NOT NULL,
    start_time TEXT NOT NULL,
    end_time TEXT,
    entry_type TEXT NOT NULL,
    notes TEXT,
    materials_used TEXT,
    adjusted_by TEXT,
    adjustment_reason TEXT,
    location TEXT,
    break_duration INTEGER DEFAULT 0,
    FOREIGN KEY (job_id) REFERENCES job (id)
);


================================================
File: /gitback.sh
================================================
#!/bin/sh
# root_gitbackup.sh v3
# Location: /root/root_gitbackup.sh
cd /home/Jobmanager
# rm job*.txt
cd /home/
HOUR=`date +%-H`
HOUR=$((HOUR + 1))
if [ $HOUR -eq 24 ]; then
    HOUR=00
fi
DATE=$(date +"%m%d-")${HOUR}$(date +%M)
gitingest ./Jobmanager -e /static -e /backups -e /db -e /README.txt -e /export -e *.db -e /utils -o /home/Jobmanager/jobmgr-${DATE}.txt


================================================
File: /run.py
================================================
# run.py
from app import create_app

app = create_app()

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)


================================================
File: /LICENSE
================================================
MIT License

Copyright (c) 2025 kees

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


================================================
File: /updated-jobmanager-doc.md
================================================
# Job Manager System Design

## Core Requirements
- Must run entirely offline/local
- Mobile-friendly interface
- Lightweight enough for Raspberry Pi deployment
- No external CDNs or dependencies
- Daily local database backups
- Complete file management (no partial updates)
- Practical implementation focus
- Workshop-friendly interface

## Core Philosophy
- Interactive list-based interface is the heart of the system
- Time tracking should be seamless and automatic
- Smart behaviors reduce administrative overhead
- Design for workshop environment
- Future-proof for billing and automation
- Support for work breaks via pause function
- Comprehensive search across all data

## Main Entities

### Customer
```
- ID
- Name
- Email
- Phone
- Address
  - Street
  - City
  - Postal Code
  - Country
- VAT/Tax Number
- Payment Terms
- Notes
```

### Job
```
- ID
- Customer ID
- Description
- Status (Active/Pending/Completed)
- Creation Date
- Deadline
- Rate Information
  - Base Rate
  - Custom Rate (if different)
- Estimated Hours
- Total Hours Accumulated
- Last Active
```

### TimeEntry
```
- ID
- Job ID
- Start Time
- End Time
- Entry Type (auto/manual/adjusted)
- Notes
- Materials Used
- Adjusted By (if corrected)
- Adjustment Reason
- Location (future: for RFID integration)
- Break Duration
```

## User Interface Design

### Main Screen Layout
```
+----------------------------------------+
|  Search/Filter Bar                      |
+----------------------------------------+
|  Timer Controls [▶️ ⏸️ ⏹️]              |
+----------------------------------------+
|  [Active Jobs]                         |
|  - Customer | Job | Timer | Hours | €  |
|    ↳ Expanded details when clicked     |
|  - Next job...                         |
+----------------------------------------+
|  [Pending Jobs]                        |
|  - Same format                         |
+----------------------------------------+
|  [Recent Completed]                    |
|  - Same format                         |
+----------------------------------------+
|  Quick Actions Bar                     |
+----------------------------------------+
```

### Mobile Considerations
- Touch-friendly large tap targets
- Responsive design (no horizontal scrolling)
- Simplified views for small screens
- Bottom navigation for thumb reach
- Swipe gestures for common actions

### Smart Behaviors
- Drag job to top = Start timer
- Auto-stop previous job when new one started
- Click to expand/collapse details
- Double-click for quick edits
- Color coding for status/alerts
- Break tracking with pause button
- Global search across all fields

### Expanded Job View
```
+----------------+------------------+---------------+
| Customer Info  | Time Entries    | Running       |
| Job Details   | Progress Notes  | Totals        |
| Rate Info     | Materials Used  | Costs         |
+----------------+------------------+---------------+
```

## Time Tracking System

### Automatic Tracking
- Start on job activation (drag to top)
- Stop on new job start
- Manual pause for breaks
- Batch similar entries

### Manual Adjustments
- Split time entries
- Merge entries
- Backdate entries
- Bulk time entry
- Corrections with audit trail
- Break time tracking

### Time Views
- Real-time active job timer
- Daily totals per job
- Weekly summaries
- Monthly reports
- Customer statements

## Data Management

### Backup System
- Daily automatic local backups
- Rolling 7-day backup retention
- Manual backup option
- Simple restoration process
- Backup verification

### Search Functionality
- Global search across all fields
- Search in:
  - Job descriptions
  - Customer details
  - Notes
  - Materials
  - Time entries
- Real-time search results
- Search history

## Implementation Notes

### Database Considerations
- SQLite for simplicity and portability
- Regular VACUUM operations
- Efficient indexing for search
- Minimal writes for Pi storage
- Transaction safety

### UI Guidelines
- Touch-friendly interface
- Clear visual feedback
- Minimal click operations
- Workshop-friendly design
- Error prevention over error handling
- Offline-first architecture
- No external resources

### Performance Considerations
- Lazy loading for long lists
- Minimal DOM updates
- Efficient search indexing
- Optimized for Pi resources
- Background backup process


================================================
File: /README.md
================================================
# Jobmanager-2



================================================
File: /requirements.txt
================================================
# requirements.txt
Flask==3.0.2
python-dotenv==1.0.1

